export var AUTH_ACTIONS_TYPE;
(function (AUTH_ACTIONS_TYPE) {
    AUTH_ACTIONS_TYPE["OPEN_SIGN_UP_DIALOG"] = "[Auth] User wants to sign up";
    AUTH_ACTIONS_TYPE["SIGN_UP"] = "[Auth] User tries to sign up";
    AUTH_ACTIONS_TYPE["SIGN_UP_SUCCESS"] = "[Auth] Sign up success";
    AUTH_ACTIONS_TYPE["SIGN_UP_FAILURE"] = "[Auth] Sign up failure";
    AUTH_ACTIONS_TYPE["SEND_ACTIVATION_CODE"] = "[Auth] User sends his activation code";
    AUTH_ACTIONS_TYPE["SEND_ACTIVATION_CODE_SUCCESS"] = "[Auth] Success while sending the activation";
    AUTH_ACTIONS_TYPE["SEND_ACTIVATION_CODE_FAILURE"] = "[Auth] Activation code failure";
    AUTH_ACTIONS_TYPE["LOG_IN"] = "[Auth] User tries to log in";
    AUTH_ACTIONS_TYPE["LOG_IN_SUCCESS"] = "[Auth] Log in success";
    AUTH_ACTIONS_TYPE["LOG_IN_FAILURE"] = "[Auth] Log in failure";
    AUTH_ACTIONS_TYPE["LOG_OUT"] = "[Auth] User logs out";
    AUTH_ACTIONS_TYPE["LOAD_USER_INFORMATION"] = "[Auth] Loading of user information";
    AUTH_ACTIONS_TYPE["LOAD_USER_INFORMATION_SUCCESS"] = "[Auth] Loading of user information success";
    AUTH_ACTIONS_TYPE["LOAD_USER_INFORMATION_FAILURE"] = "[Auth] Loading of user information failure";
    AUTH_ACTIONS_TYPE["CHANGE_PASSWORD"] = "[Auth] User changes his password";
    AUTH_ACTIONS_TYPE["CHANGE_PASSWORD_SUCCESS"] = "[Auth] Password change success";
    AUTH_ACTIONS_TYPE["CHANGE_PASSWORD_FAILURE"] = "[Auth] Password change failure";
    AUTH_ACTIONS_TYPE["OPEN_FORGOTTEN_PASSWORD_DIALOG"] = "[Auth] User opens dialog for password resetting";
    AUTH_ACTIONS_TYPE["SEND_PASSWORD"] = "[Auth] User has asked for having back a new password";
    AUTH_ACTIONS_TYPE["SEND_PASSWORD_SUCCESS"] = "[Auth] User has received his password";
    AUTH_ACTIONS_TYPE["SEND_PASSWORD_FAILURE"] = "[Auth] Error in the process of sending the password to the user";
    AUTH_ACTIONS_TYPE["UPDATE_USER"] = "[Auth] Update of user";
    AUTH_ACTIONS_TYPE["RESET_AUTH_STATE"] = "[Auth] Reset Auth state";
})(AUTH_ACTIONS_TYPE || (AUTH_ACTIONS_TYPE = {}));
export class OpenSignUpDialog {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.OPEN_SIGN_UP_DIALOG;
    }
}
export class SignUp {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SIGN_UP;
    }
}
export class SignUpSuccess {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS;
    }
}
export class SignUpFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE;
    }
}
export class SendActivationCode {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE;
    }
}
export class SendActivationCodeSuccess {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE_SUCCESS;
    }
}
export class SendActivationCodeFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE_FAILURE;
    }
}
export class LogIn {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.LOG_IN;
    }
}
export class LogInSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS;
    }
}
export class LogInFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.LOG_IN_FAILURE;
    }
}
export class LogOut {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.LOG_OUT;
    }
}
export class LoadUserInformation {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION;
    }
}
export class LoadUserInformationSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS;
    }
}
export class LoadUserInformationFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_FAILURE;
    }
}
export class ChangePassword {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD;
    }
}
export class ChangePasswordSuccess {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS;
    }
}
export class ChangePasswordFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE;
    }
}
export class OpenForgottenPasswordDialog {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.OPEN_FORGOTTEN_PASSWORD_DIALOG;
    }
}
export class SendPassword {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SEND_PASSWORD;
    }
}
export class SendPasswordSuccess {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS;
    }
}
export class SendPasswordFailure {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE;
    }
}
export class UpdateUser {
    constructor(payload) {
        this.payload = payload;
        this.type = AUTH_ACTIONS_TYPE.UPDATE_USER;
    }
}
export class ResetAuthState {
    constructor() {
        this.type = AUTH_ACTIONS_TYPE.RESET_AUTH_STATE;
    }
}
//# sourceMappingURL=data:application/json;base64,