import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { Store, select } from '@ngrx/store';
import { MatDialogRef, MatDialog } from '@angular/material/dialog';
import { map, switchMap, catchError, tap, withLatestFrom, concatMap } from 'rxjs/operators';
import { get } from 'lodash';
import { AUTH_ACTIONS_TYPE, LogInSuccess, LogInFailure, SignUpFailure, SignUpSuccess, ChangePasswordSuccess, ChangePasswordFailure, LoadUserInformationSuccess, LoadUserInformationFailure, SendPasswordSuccess, SendPasswordFailure } from './actions';
import { selectUser } from './selectors';
import { AuthService } from '../services/auth.service';
import { ForgottenPasswordComponent } from '../components/forgotten-password/forgotten-password.component';
import { AUTH_RESET_ACTIONS, AUTH_TRADUCTIONS } from '../token';
import { SignUpComponent } from '../components/sign-up/sign-up.component';
let AuthEffects = class AuthEffects {
    constructor(resetActions, traductions, actions, authService, router, toastService, dialog, store) {
        this.resetActions = resetActions;
        this.traductions = traductions;
        this.actions = actions;
        this.authService = authService;
        this.router = router;
        this.toastService = toastService;
        this.dialog = dialog;
        this.store = store;
        this.OpenSignUpDialog$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.OPEN_SIGN_UP_DIALOG), tap(() => this.dialogRef = this.dialog.open(SignUpComponent)));
        this.SignUp$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP), map((action) => action.payload), switchMap((user) => this.authService.createUser(user).pipe(map(() => new SignUpSuccess()), catchError((error) => of(new SignUpFailure(error))))));
        this.SignUpSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS), tap(() => {
            this.toastService.success(get(this.traductions || {}, 'messages.signupSuccess', 'Your account has been created!'));
        }));
        this.SignUpFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE), tap((error) => this.toastService.error(get(this.traductions || {}, 'messages.signupFailure', 'Please try again with a new username.'))));
        this.LogIn$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN), map((action) => action.payload), switchMap((user) => this.authService.login(user).pipe(concatMap((loggedInUser) => {
            sessionStorage.setItem('token', loggedInUser.token.token);
            return this.authService.getUserInformation().pipe(map(({ user, usersList }) => new LogInSuccess({ user, usersList })), catchError((error) => of(new LogInFailure(error))));
        }), catchError((error) => of(new LogInFailure(error))))));
        this.LogInSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS), withLatestFrom(this.store.pipe(select(selectUser))), tap(([action, user]) => {
            const redirectedUrlAfterLogIn = sessionStorage.getItem('redirectedUrlAfterLogIn');
            if (redirectedUrlAfterLogIn) {
                this.router.navigateByUrl(redirectedUrlAfterLogIn);
                sessionStorage.removeItem('redirectedUrlAfterLogIn');
            }
            else {
                this.router.navigateByUrl(user.redirectUrlAfterLogin);
            }
            this.toastService.success(get(this.traductions || {}, 'messages.loginSuccess', 'Hi! Nice to see you again!'));
        }));
        this.LogInFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN_FAILURE), tap((error) => this.toastService.error(get(this.traductions || {}, 'messages.loginFailure', 'Wrong credentials. Please check again.'))));
        this.LogOut$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_OUT), switchMap((action) => {
            sessionStorage.removeItem('token');
            this.router.navigate(['log-in']);
            return (this.resetActions || []).map((resetAction) => new resetAction());
        }));
        this.LoadUserInformation$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION), switchMap((action) => this.authService.getUserInformation().pipe(map(({ user, usersList }) => new LoadUserInformationSuccess(user)), catchError((error) => of(new LoadUserInformationFailure(error))))));
        this.ChangePassword$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD), switchMap((action) => this.authService.changePassword(action.payload).pipe(map(() => new ChangePasswordSuccess()), catchError((error) => of(new ChangePasswordFailure(error))))));
        this.ChangePasswordSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS), tap(() => this.toastService.success(get(this.traductions || {}, 'messages.changePasswordSuccess', 'Your password has been successfully changed!'))));
        this.ChangePasswordFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE), tap((error) => this.toastService.error(get(this.traductions || {}, 'messages.changePasswordFailure', 'Wrong current password. Please try again.'))));
        this.OpenForgottenPasswordDialog$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.OPEN_FORGOTTEN_PASSWORD_DIALOG), tap(() => this.dialogRef = this.dialog.open(ForgottenPasswordComponent)));
        this.SendPassword$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD), tap(() => {
            this.dialogRef.close();
        }), switchMap((action) => this.authService.sendPassword(action.payload).pipe(map(() => new SendPasswordSuccess()), catchError((error) => of(new SendPasswordFailure(error))))));
        this.SendPasswordSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS), tap(() => this.toastService.success(get(this.traductions || {}, 'messages.passwordResetSuccess', 'An email for resetting your password has been sent to your address.'))));
        this.SendPasswordFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE), tap(() => this.toastService.error(get(this.traductions || {}, 'messages.passwordResetFailure', 'An error occured. Please try again.'))));
    }
};
AuthEffects.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [AUTH_RESET_ACTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_TRADUCTIONS,] }] },
    { type: Actions },
    { type: AuthService },
    { type: Router },
    { type: ToastrService },
    { type: MatDialog },
    { type: Store }
];
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "OpenSignUpDialog$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "SignUp$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "SignUpSuccess$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "SignUpFailure$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "LogIn$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "LogInSuccess$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "LogInFailure$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "LogOut$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "LoadUserInformation$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "ChangePassword$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "ChangePasswordSuccess$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "ChangePasswordFailure$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "OpenForgottenPasswordDialog$", void 0);
__decorate([
    Effect()
], AuthEffects.prototype, "SendPassword$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "SendPasswordSuccess$", void 0);
__decorate([
    Effect({ dispatch: false })
], AuthEffects.prototype, "SendPasswordFailure$", void 0);
AuthEffects = __decorate([
    Injectable(),
    __param(0, Inject(AUTH_RESET_ACTIONS)),
    __param(1, Inject(AUTH_TRADUCTIONS))
], AuthEffects);
export { AuthEffects };
//# sourceMappingURL=data:application/json;base64,