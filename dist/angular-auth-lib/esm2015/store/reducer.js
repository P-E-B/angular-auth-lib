import * as UserActions from './actions';
export const initialState = {
    isAuthenticated: false,
    isSignUpLoading: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state = initialState, action) {
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:
            return Object.assign(Object.assign({}, state), { error: null, isSignUpLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return Object.assign(Object.assign({}, state), { error: action.payload, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:
            return Object.assign(Object.assign({}, state), { error: null, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return Object.assign(Object.assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return Object.assign(Object.assign({}, state), { error: action.payload });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            const detailedUser = Object.assign(Object.assign({}, state.user), action.payload);
            return Object.assign(Object.assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return Object.assign(Object.assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return Object.assign(Object.assign({}, state), { isPasswordBeingChanged: false });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXV0aC1saWIvIiwic291cmNlcyI6WyJzdG9yZS9yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxXQUFXLE1BQU0sV0FBVyxDQUFDO0FBYXpDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBYztJQUNuQyxlQUFlLEVBQUUsS0FBSztJQUN0QixlQUFlLEVBQUUsS0FBSztJQUN0QixJQUFJLEVBQUUsSUFBSTtJQUNWLEtBQUssRUFBRSxJQUFJO0lBQ1gsc0JBQXNCLEVBQUUsS0FBSztJQUM3QixTQUFTLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsTUFBTSxVQUFVLFdBQVcsQ0FBQyxRQUFtQixZQUFZLEVBQUUsTUFBMkI7SUFDcEYsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ2pCLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU87WUFDdEMsdUNBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksSUFBRztRQUM1RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlO1lBQzlDLHVDQUFZLEtBQUssS0FBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxJQUFHO1FBQ3ZFLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWU7WUFDOUMsdUNBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssSUFBRztRQUM3RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjO1lBQzdDLHVDQUFZLEtBQUssS0FBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBRztRQUM1SCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjO1lBQzdDLHVDQUFZLEtBQUssS0FBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFBRztRQUMvQyxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPO1lBQ3RDLE9BQU8sWUFBWSxDQUFDO1FBQ3hCLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLDZCQUE2QjtZQUM1RCxNQUFNLFlBQVksbUNBQVEsS0FBSyxDQUFDLElBQUksR0FBSyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUM7WUFDMUQsdUNBQVksS0FBSyxLQUFFLElBQUksRUFBRSxZQUFZLElBQUc7UUFDNUMsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDO1FBQ25ELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGFBQWE7WUFDNUMsdUNBQVksS0FBSyxLQUFFLHNCQUFzQixFQUFFLElBQUksSUFBRztRQUN0RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQztRQUMzRCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQztRQUMzRCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUN6RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBcUI7WUFDcEQsdUNBQVksS0FBSyxLQUFFLHNCQUFzQixFQUFFLEtBQUssSUFBRztRQUN2RDtZQUNJLE9BQU8sS0FBSyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFVzZXJBY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvdXNlci5tb2RlbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhTdGF0ZSB7XG4gICAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICAgIGlzU2lnblVwTG9hZGluZzogYm9vbGVhbjtcbiAgICB1c2VyOiBVc2VyO1xuICAgIGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZTtcbiAgICBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBib29sZWFuO1xuICAgIHVzZXJzTGlzdDogeyBpZDogbnVtYmVyLCBmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyB9W107XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IEF1dGhTdGF0ZSA9IHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgIGlzU2lnblVwTG9hZGluZzogZmFsc2UsXG4gICAgdXNlcjogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBmYWxzZSxcbiAgICB1c2Vyc0xpc3Q6IG51bGxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRoUmVkdWNlcihzdGF0ZTogQXV0aFN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFVzZXJBY3Rpb25zLkFjdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogbnVsbCwgaXNTaWduVXBMb2FkaW5nOiB0cnVlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUF9GQUlMVVJFOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBhY3Rpb24ucGF5bG9hZCwgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNJR05fVVBfU1VDQ0VTUzpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogbnVsbCwgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19JTl9TVUNDRVNTOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzQXV0aGVudGljYXRlZDogdHJ1ZSwgdXNlcjogYWN0aW9uLnBheWxvYWQudXNlciwgZXJyb3I6IG51bGwsIHVzZXJzTGlzdDogYWN0aW9uLnBheWxvYWQudXNlcnNMaXN0IH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX0lOX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX09VVDpcbiAgICAgICAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9BRF9VU0VSX0lORk9STUFUSU9OX1NVQ0NFU1M6XG4gICAgICAgICAgICBjb25zdCBkZXRhaWxlZFVzZXIgPSB7IC4uLnN0YXRlLnVzZXIsIC4uLmFjdGlvbi5wYXlsb2FkIH07XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjogZGV0YWlsZWRVc2VyIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkQ6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogdHJ1ZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkNIQU5HRV9QQVNTV09SRF9TVUNDRVNTOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkNIQU5HRV9QQVNTV09SRF9GQUlMVVJFOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkRfU1VDQ0VTUzpcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TRU5EX1BBU1NXT1JEX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogZmFsc2UgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59XG4iXX0=