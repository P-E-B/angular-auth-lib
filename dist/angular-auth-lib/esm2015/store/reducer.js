import * as UserActions from './actions';
export const initialState = {
    isAuthenticated: false,
    isSignUpLoading: false,
    isLoginLoading: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state = initialState, action) {
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:
            return Object.assign(Object.assign({}, state), { error: null, isSignUpLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return Object.assign(Object.assign({}, state), { error: action.payload, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:
            return Object.assign(Object.assign({}, state), { error: null, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN:
            return Object.assign(Object.assign({}, state), { error: null, isLoginLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return Object.assign(Object.assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return Object.assign(Object.assign({}, state), { error: action.payload, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            const detailedUser = Object.assign(Object.assign({}, state.user), action.payload);
            return Object.assign(Object.assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return Object.assign(Object.assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return Object.assign(Object.assign({}, state), { isPasswordBeingChanged: false });
        case UserActions.AUTH_ACTIONS_TYPE.UPDATE_USER:
            return Object.assign(Object.assign({}, state), { user: Object.assign(Object.assign({}, state.user), action.payload) });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXV0aC1saWIvIiwic291cmNlcyI6WyJzdG9yZS9yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxXQUFXLE1BQU0sV0FBVyxDQUFDO0FBY3pDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBYztJQUNuQyxlQUFlLEVBQUUsS0FBSztJQUN0QixlQUFlLEVBQUUsS0FBSztJQUN0QixjQUFjLEVBQUUsS0FBSztJQUNyQixJQUFJLEVBQUUsSUFBSTtJQUNWLEtBQUssRUFBRSxJQUFJO0lBQ1gsc0JBQXNCLEVBQUUsS0FBSztJQUM3QixTQUFTLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsTUFBTSxVQUFVLFdBQVcsQ0FBQyxRQUFtQixZQUFZLEVBQUUsTUFBMkI7SUFDcEYsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ2pCLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU87WUFDdEMsdUNBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksSUFBRztRQUM1RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlO1lBQzlDLHVDQUFZLEtBQUssS0FBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxJQUFHO1FBQ3ZFLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWU7WUFDOUMsdUNBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssSUFBRztRQUM3RCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNO1lBQ3JDLHVDQUFZLEtBQUssS0FBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLElBQUc7UUFDM0QsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsY0FBYztZQUM3Qyx1Q0FDTyxLQUFLLEtBQ1IsZUFBZSxFQUFFLElBQUksRUFDckIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUN6QixLQUFLLEVBQUUsSUFBSSxFQUNYLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDbkMsY0FBYyxFQUFFLEtBQUssSUFDdkI7UUFDTixLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjO1lBQzdDLHVDQUFZLEtBQUssS0FBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxJQUFHO1FBQ3RFLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU87WUFDdEMsT0FBTyxZQUFZLENBQUM7UUFDeEIsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsNkJBQTZCO1lBQzVELE1BQU0sWUFBWSxtQ0FBUSxLQUFLLENBQUMsSUFBSSxHQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQztZQUMxRCx1Q0FBWSxLQUFLLEtBQUUsSUFBSSxFQUFFLFlBQVksSUFBRztRQUM1QyxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUM7UUFDbkQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsYUFBYTtZQUM1Qyx1Q0FBWSxLQUFLLEtBQUUsc0JBQXNCLEVBQUUsSUFBSSxJQUFHO1FBQ3RELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDO1FBQzNELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDO1FBQzNELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDO1FBQ3pELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQjtZQUNwRCx1Q0FBWSxLQUFLLEtBQUUsc0JBQXNCLEVBQUUsS0FBSyxJQUFHO1FBQ3ZELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVc7WUFDMUMsdUNBQVksS0FBSyxLQUFFLElBQUksa0NBQU8sS0FBSyxDQUFDLElBQUksR0FBSyxNQUFNLENBQUMsT0FBTyxLQUFJO1FBQ25FO1lBQ0ksT0FBTyxLQUFLLENBQUM7S0FDcEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVXNlckFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL21vZGVscy91c2VyLm1vZGVscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFN0YXRlIHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW47XG4gICAgaXNTaWduVXBMb2FkaW5nOiBib29sZWFuO1xuICAgIGlzTG9naW5Mb2FkaW5nOiBib29sZWFuO1xuICAgIHVzZXI6IFVzZXI7XG4gICAgZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlO1xuICAgIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IGJvb2xlYW47XG4gICAgdXNlcnNMaXN0OiB7IGlkOiBudW1iZXIsIGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nIH1bXTtcbn1cblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQXV0aFN0YXRlID0ge1xuICAgIGlzQXV0aGVudGljYXRlZDogZmFsc2UsXG4gICAgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSxcbiAgICBpc0xvZ2luTG9hZGluZzogZmFsc2UsXG4gICAgdXNlcjogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBmYWxzZSxcbiAgICB1c2Vyc0xpc3Q6IG51bGxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRoUmVkdWNlcihzdGF0ZTogQXV0aFN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFVzZXJBY3Rpb25zLkFjdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogbnVsbCwgaXNTaWduVXBMb2FkaW5nOiB0cnVlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUF9GQUlMVVJFOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBhY3Rpb24ucGF5bG9hZCwgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNJR05fVVBfU1VDQ0VTUzpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogbnVsbCwgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19JTjpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogbnVsbCwgaXNMb2dpbkxvYWRpbmc6IHRydWUgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0dfSU5fU1VDQ0VTUzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLnVzZXIsXG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgdXNlcnNMaXN0OiBhY3Rpb24ucGF5bG9hZC51c2Vyc0xpc3QsXG4gICAgICAgICAgICAgICAgaXNMb2dpbkxvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19JTl9GQUlMVVJFOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBhY3Rpb24ucGF5bG9hZCwgaXNMb2dpbkxvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX09VVDpcbiAgICAgICAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9BRF9VU0VSX0lORk9STUFUSU9OX1NVQ0NFU1M6XG4gICAgICAgICAgICBjb25zdCBkZXRhaWxlZFVzZXIgPSB7IC4uLnN0YXRlLnVzZXIsIC4uLmFjdGlvbi5wYXlsb2FkIH07XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjogZGV0YWlsZWRVc2VyIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkQ6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogdHJ1ZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkNIQU5HRV9QQVNTV09SRF9TVUNDRVNTOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkNIQU5HRV9QQVNTV09SRF9GQUlMVVJFOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkRfU1VDQ0VTUzpcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TRU5EX1BBU1NXT1JEX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogZmFsc2UgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5VUERBVEVfVVNFUjpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiB7IC4uLnN0YXRlLnVzZXIsIC4uLmFjdGlvbi5wYXlsb2FkIH19O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbiJdfQ==