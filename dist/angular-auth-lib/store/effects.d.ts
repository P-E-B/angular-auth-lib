import { Router } from '@angular/router';
import { Actions } from '@ngrx/effects';
import { HttpErrorResponse } from '@angular/common/http';
import { ToastrService } from 'ngx-toastr';
import { Store } from '@ngrx/store';
import { MatDialog } from '@angular/material/dialog';
import { LogInSuccess, LogInFailure, SignUpFailure, SignUpSuccess, ChangePasswordSuccess, ChangePasswordFailure, LoadUserInformationSuccess, LoadUserInformationFailure, SendPasswordSuccess, SendPasswordFailure } from './actions';
import { User } from '../models/user.models';
import { AuthService } from '../services/auth.service';
import { AuthModuleConfig } from '../token';
import { AuthState } from './reducer';
export declare class AuthEffects {
    private resetActions;
    private traductions;
    private actions;
    private authService;
    private router;
    private toastService;
    private dialog;
    private store;
    private dialogRef;
    constructor(resetActions: any[], traductions: AuthModuleConfig['traductions'], actions: Actions, authService: AuthService, router: Router, toastService: ToastrService, dialog: MatDialog, store: Store<AuthState>);
    OpenSignUpDialog$: import("rxjs").Observable<never>;
    SignUp$: import("rxjs").Observable<SignUpSuccess | SignUpFailure>;
    SignUpSuccess$: import("rxjs").Observable<never>;
    SignUpFailure$: import("rxjs").Observable<HttpErrorResponse>;
    LogIn$: import("rxjs").Observable<LogInSuccess | LogInFailure>;
    LogInSuccess$: import("rxjs").Observable<[LogInSuccess, User]>;
    LogInFailure$: import("rxjs").Observable<HttpErrorResponse>;
    LogOut$: import("rxjs").Observable<any>;
    LoadUserInformation$: import("rxjs").Observable<LoadUserInformationSuccess | LoadUserInformationFailure>;
    ChangePassword$: import("rxjs").Observable<ChangePasswordSuccess | ChangePasswordFailure>;
    ChangePasswordSuccess$: import("rxjs").Observable<never>;
    ChangePasswordFailure$: import("rxjs").Observable<HttpErrorResponse>;
    OpenForgottenPasswordDialog$: import("rxjs").Observable<never>;
    SendPassword$: import("rxjs").Observable<SendPasswordSuccess | SendPasswordFailure>;
    SendPasswordSuccess$: import("rxjs").Observable<never>;
    SendPasswordFailure$: import("rxjs").Observable<never>;
}
