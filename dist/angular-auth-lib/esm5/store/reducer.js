import { __assign } from "tslib";
import * as UserActions from './actions';
export var initialState = {
    isAuthenticated: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return __assign(__assign({}, state), { error: action.payload });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return __assign(__assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return __assign(__assign({}, state), { error: action.payload });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            var detailedUser = __assign(__assign({}, state.user), action.payload);
            return __assign(__assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return __assign(__assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return __assign(__assign({}, state), { isPasswordBeingChanged: false });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXV0aC1saWIvIiwic291cmNlcyI6WyJzdG9yZS9yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssV0FBVyxNQUFNLFdBQVcsQ0FBQztBQVl6QyxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWM7SUFDbkMsZUFBZSxFQUFFLEtBQUs7SUFDdEIsSUFBSSxFQUFFLElBQUk7SUFDVixLQUFLLEVBQUUsSUFBSTtJQUNYLHNCQUFzQixFQUFFLEtBQUs7SUFDN0IsU0FBUyxFQUFFLElBQUk7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBK0IsRUFBRSxNQUEyQjtJQUE1RCxzQkFBQSxFQUFBLG9CQUErQjtJQUN2RCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsZUFBZTtZQUM5Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQUc7UUFDL0MsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsY0FBYztZQUM3Qyw2QkFBWSxLQUFLLEtBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUc7UUFDNUgsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsY0FBYztZQUM3Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQUc7UUFDL0MsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTztZQUN0QyxPQUFPLFlBQVksQ0FBQztRQUN4QixLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyw2QkFBNkI7WUFDNUQsSUFBTSxZQUFZLHlCQUFRLEtBQUssQ0FBQyxJQUFJLEdBQUssTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1lBQzFELDZCQUFZLEtBQUssS0FBRSxJQUFJLEVBQUUsWUFBWSxJQUFHO1FBQzVDLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztRQUNuRCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhO1lBQzVDLDZCQUFZLEtBQUssS0FBRSxzQkFBc0IsRUFBRSxJQUFJLElBQUc7UUFDdEQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUM7UUFDM0QsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUM7UUFDM0QsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLENBQUM7UUFDekQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMscUJBQXFCO1lBQ3BELDZCQUFZLEtBQUssS0FBRSxzQkFBc0IsRUFBRSxLQUFLLElBQUc7UUFDdkQ7WUFDSSxPQUFPLEtBQUssQ0FBQztLQUNwQjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVc2VyQWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXIubW9kZWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBBdXRoU3RhdGUge1xuICAgIGlzQXV0aGVudGljYXRlZDogYm9vbGVhbjtcbiAgICB1c2VyOiBVc2VyO1xuICAgIGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZTtcbiAgICBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBib29sZWFuO1xuICAgIHVzZXJzTGlzdDogeyBpZDogbnVtYmVyLCBmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyB9W107XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IEF1dGhTdGF0ZSA9IHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgIHVzZXI6IG51bGwsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogZmFsc2UsXG4gICAgdXNlcnNMaXN0OiBudWxsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXV0aFJlZHVjZXIoc3RhdGU6IEF1dGhTdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBVc2VyQWN0aW9ucy5BY3Rpb25zKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNJR05fVVBfRkFJTFVSRTpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0dfSU5fU1VDQ0VTUzpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc0F1dGhlbnRpY2F0ZWQ6IHRydWUsIHVzZXI6IGFjdGlvbi5wYXlsb2FkLnVzZXIsIGVycm9yOiBudWxsLCB1c2Vyc0xpc3Q6IGFjdGlvbi5wYXlsb2FkLnVzZXJzTGlzdCB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19JTl9GQUlMVVJFOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBhY3Rpb24ucGF5bG9hZCB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19PVVQ6XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPQURfVVNFUl9JTkZPUk1BVElPTl9TVUNDRVNTOlxuICAgICAgICAgICAgY29uc3QgZGV0YWlsZWRVc2VyID0geyAuLi5zdGF0ZS51c2VyLCAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZXI6IGRldGFpbGVkVXNlciB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkNIQU5HRV9QQVNTV09SRDpcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TRU5EX1BBU1NXT1JEOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IHRydWUgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5DSEFOR0VfUEFTU1dPUkRfU1VDQ0VTUzpcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5DSEFOR0VfUEFTU1dPUkRfRkFJTFVSRTpcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TRU5EX1BBU1NXT1JEX1NVQ0NFU1M6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0VORF9QQVNTV09SRF9GQUlMVVJFOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IGZhbHNlIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuIl19