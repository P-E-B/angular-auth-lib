import { __assign } from "tslib";
import * as UserActions from './actions';
export var initialState = {
    isAuthenticated: false,
    isSignUpLoading: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return __assign(__assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return __assign(__assign({}, state), { error: action.payload });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            var detailedUser = __assign(__assign({}, state.user), action.payload);
            return __assign(__assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return __assign(__assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return __assign(__assign({}, state), { isPasswordBeingChanged: false });
        case UserActions.AUTH_ACTIONS_TYPE.UPDATE_USER:
            return __assign(__assign({}, state), { user: __assign(__assign({}, state.user), action.payload) });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXV0aC1saWIvIiwic291cmNlcyI6WyJzdG9yZS9yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssV0FBVyxNQUFNLFdBQVcsQ0FBQztBQWF6QyxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWM7SUFDbkMsZUFBZSxFQUFFLEtBQUs7SUFDdEIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsSUFBSSxFQUFFLElBQUk7SUFDVixLQUFLLEVBQUUsSUFBSTtJQUNYLHNCQUFzQixFQUFFLEtBQUs7SUFDN0IsU0FBUyxFQUFFLElBQUk7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBK0IsRUFBRSxNQUEyQjtJQUE1RCxzQkFBQSxFQUFBLG9CQUErQjtJQUN2RCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTztZQUN0Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxJQUFHO1FBQzVELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWU7WUFDOUMsNkJBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLElBQUc7UUFDdkUsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsZUFBZTtZQUM5Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxJQUFHO1FBQzdELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGNBQWM7WUFDN0MsNkJBQVksS0FBSyxLQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFHO1FBQzVILEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGNBQWM7WUFDN0MsNkJBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxJQUFHO1FBQy9DLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU87WUFDdEMsT0FBTyxZQUFZLENBQUM7UUFDeEIsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsNkJBQTZCO1lBQzVELElBQU0sWUFBWSx5QkFBUSxLQUFLLENBQUMsSUFBSSxHQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQztZQUMxRCw2QkFBWSxLQUFLLEtBQUUsSUFBSSxFQUFFLFlBQVksSUFBRztRQUM1QyxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUM7UUFDbkQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsYUFBYTtZQUM1Qyw2QkFBWSxLQUFLLEtBQUUsc0JBQXNCLEVBQUUsSUFBSSxJQUFHO1FBQ3RELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDO1FBQzNELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDO1FBQzNELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDO1FBQ3pELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQjtZQUNwRCw2QkFBWSxLQUFLLEtBQUUsc0JBQXNCLEVBQUUsS0FBSyxJQUFHO1FBQ3ZELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVc7WUFDMUMsNkJBQVksS0FBSyxLQUFFLElBQUksd0JBQU8sS0FBSyxDQUFDLElBQUksR0FBSyxNQUFNLENBQUMsT0FBTyxLQUFJO1FBQ25FO1lBQ0ksT0FBTyxLQUFLLENBQUM7S0FDcEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVXNlckFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL21vZGVscy91c2VyLm1vZGVscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFN0YXRlIHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW47XG4gICAgaXNTaWduVXBMb2FkaW5nOiBib29sZWFuO1xuICAgIHVzZXI6IFVzZXI7XG4gICAgZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlO1xuICAgIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IGJvb2xlYW47XG4gICAgdXNlcnNMaXN0OiB7IGlkOiBudW1iZXIsIGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nIH1bXTtcbn1cblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQXV0aFN0YXRlID0ge1xuICAgIGlzQXV0aGVudGljYXRlZDogZmFsc2UsXG4gICAgaXNTaWduVXBMb2FkaW5nOiBmYWxzZSxcbiAgICB1c2VyOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IGZhbHNlLFxuICAgIHVzZXJzTGlzdDogbnVsbFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhSZWR1Y2VyKHN0YXRlOiBBdXRoU3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbjogVXNlckFjdGlvbnMuQWN0aW9ucykge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TSUdOX1VQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBudWxsLCBpc1NpZ25VcExvYWRpbmc6IHRydWUgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TSUdOX1VQX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6IGFjdGlvbi5wYXlsb2FkLCBpc1NpZ25VcExvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUF9TVUNDRVNTOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBudWxsLCBpc1NpZ25VcExvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX0lOX1NVQ0NFU1M6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNBdXRoZW50aWNhdGVkOiB0cnVlLCB1c2VyOiBhY3Rpb24ucGF5bG9hZC51c2VyLCBlcnJvcjogbnVsbCwgdXNlcnNMaXN0OiBhY3Rpb24ucGF5bG9hZC51c2Vyc0xpc3QgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0dfSU5fRkFJTFVSRTpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0dfT1VUOlxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0FEX1VTRVJfSU5GT1JNQVRJT05fU1VDQ0VTUzpcbiAgICAgICAgICAgIGNvbnN0IGRldGFpbGVkVXNlciA9IHsgLi4uc3RhdGUudXNlciwgLi4uYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiBkZXRhaWxlZFVzZXIgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5DSEFOR0VfUEFTU1dPUkQ6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0VORF9QQVNTV09SRDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiB0cnVlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEX1NVQ0NFU1M6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEX0ZBSUxVUkU6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0VORF9QQVNTV09SRF9TVUNDRVNTOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkRfRkFJTFVSRTpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlVQREFURV9VU0VSOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZXI6IHsgLi4uc3RhdGUudXNlciwgLi4uYWN0aW9uLnBheWxvYWQgfX07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuIl19