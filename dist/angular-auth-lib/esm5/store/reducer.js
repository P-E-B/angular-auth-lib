import { __assign } from "tslib";
import * as UserActions from './actions';
export var initialState = {
    isAuthenticated: false,
    isSignUpLoading: false,
    isSendActivationCodeLoading: false,
    isUserActivated: null,
    isUserCreated: null,
    isLoginLoading: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isSignUpLoading: false, isUserCreated: false });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: false, isUserCreated: true });
        case UserActions.AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE:
            return __assign(__assign({}, state), { error: null, isSendActivationCodeLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isSendActivationCodeLoading: false, isUserActivated: false });
        case UserActions.AUTH_ACTIONS_TYPE.SEND_ACTIVATION_CODE_SUCCESS:
            return __assign(__assign({}, state), { error: null, isSendActivationCodeLoading: false, isUserActivated: true });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN:
            return __assign(__assign({}, state), { error: null, isLoginLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return __assign(__assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            var detailedUser = __assign(__assign({}, state.user), action.payload);
            return __assign(__assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return __assign(__assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return __assign(__assign({}, state), { isPasswordBeingChanged: false });
        case UserActions.AUTH_ACTIONS_TYPE.UPDATE_USER:
            return __assign(__assign({}, state), { user: __assign(__assign({}, state.user), action.payload) });
        case UserActions.AUTH_ACTIONS_TYPE.RESET_AUTH_STATE:
            return initialState;
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,