import { __assign } from "tslib";
import * as UserActions from './actions';
export var initialState = {
    isAuthenticated: false,
    isSignUpLoading: false,
    isLoginLoading: false,
    user: null,
    error: null,
    isPasswordBeingChanged: false,
    usersList: null
};
export function authReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:
            return __assign(__assign({}, state), { error: null, isSignUpLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN:
            return __assign(__assign({}, state), { error: null, isLoginLoading: true });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:
            return __assign(__assign({}, state), { isAuthenticated: true, user: action.payload.user, error: null, usersList: action.payload.usersList, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:
            return __assign(__assign({}, state), { error: action.payload, isLoginLoading: false });
        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:
            return initialState;
        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:
            var detailedUser = __assign(__assign({}, state.user), action.payload);
            return __assign(__assign({}, state), { user: detailedUser });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:
            return __assign(__assign({}, state), { isPasswordBeingChanged: true });
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:
        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:
            return __assign(__assign({}, state), { isPasswordBeingChanged: false });
        case UserActions.AUTH_ACTIONS_TYPE.UPDATE_USER:
            return __assign(__assign({}, state), { user: __assign(__assign({}, state.user), action.payload) });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXV0aC1saWIvIiwic291cmNlcyI6WyJzdG9yZS9yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssV0FBVyxNQUFNLFdBQVcsQ0FBQztBQWN6QyxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWM7SUFDbkMsZUFBZSxFQUFFLEtBQUs7SUFDdEIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsY0FBYyxFQUFFLEtBQUs7SUFDckIsSUFBSSxFQUFFLElBQUk7SUFDVixLQUFLLEVBQUUsSUFBSTtJQUNYLHNCQUFzQixFQUFFLEtBQUs7SUFDN0IsU0FBUyxFQUFFLElBQUk7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBK0IsRUFBRSxNQUEyQjtJQUE1RCxzQkFBQSxFQUFBLG9CQUErQjtJQUN2RCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTztZQUN0Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxJQUFHO1FBQzVELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWU7WUFDOUMsNkJBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLElBQUc7UUFDdkUsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsZUFBZTtZQUM5Qyw2QkFBWSxLQUFLLEtBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxJQUFHO1FBQzdELEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU07WUFDckMsNkJBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksSUFBRztRQUMzRCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjO1lBQzdDLDZCQUNPLEtBQUssS0FDUixlQUFlLEVBQUUsSUFBSSxFQUNyQixJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQ3pCLEtBQUssRUFBRSxJQUFJLEVBQ1gsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUNuQyxjQUFjLEVBQUUsS0FBSyxJQUN2QjtRQUNOLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGNBQWM7WUFDN0MsNkJBQVksS0FBSyxLQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLElBQUc7UUFDdEUsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTztZQUN0QyxPQUFPLFlBQVksQ0FBQztRQUN4QixLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyw2QkFBNkI7WUFDNUQsSUFBTSxZQUFZLHlCQUFRLEtBQUssQ0FBQyxJQUFJLEdBQUssTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1lBQzFELDZCQUFZLEtBQUssS0FBRSxJQUFJLEVBQUUsWUFBWSxJQUFHO1FBQzVDLEtBQUssV0FBVyxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztRQUNuRCxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhO1lBQzVDLDZCQUFZLEtBQUssS0FBRSxzQkFBc0IsRUFBRSxJQUFJLElBQUc7UUFDdEQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUM7UUFDM0QsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUM7UUFDM0QsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLENBQUM7UUFDekQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMscUJBQXFCO1lBQ3BELDZCQUFZLEtBQUssS0FBRSxzQkFBc0IsRUFBRSxLQUFLLElBQUc7UUFDdkQsS0FBSyxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVztZQUMxQyw2QkFBWSxLQUFLLEtBQUUsSUFBSSx3QkFBTyxLQUFLLENBQUMsSUFBSSxHQUFLLE1BQU0sQ0FBQyxPQUFPLEtBQUk7UUFDbkU7WUFDSSxPQUFPLEtBQUssQ0FBQztLQUNwQjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVc2VyQWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXIubW9kZWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBBdXRoU3RhdGUge1xuICAgIGlzQXV0aGVudGljYXRlZDogYm9vbGVhbjtcbiAgICBpc1NpZ25VcExvYWRpbmc6IGJvb2xlYW47XG4gICAgaXNMb2dpbkxvYWRpbmc6IGJvb2xlYW47XG4gICAgdXNlcjogVXNlcjtcbiAgICBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2U7XG4gICAgaXNQYXNzd29yZEJlaW5nQ2hhbmdlZDogYm9vbGVhbjtcbiAgICB1c2Vyc0xpc3Q6IHsgaWQ6IG51bWJlciwgZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcgfVtdO1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBBdXRoU3RhdGUgPSB7XG4gICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICBpc1NpZ25VcExvYWRpbmc6IGZhbHNlLFxuICAgIGlzTG9naW5Mb2FkaW5nOiBmYWxzZSxcbiAgICB1c2VyOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGlzUGFzc3dvcmRCZWluZ0NoYW5nZWQ6IGZhbHNlLFxuICAgIHVzZXJzTGlzdDogbnVsbFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhSZWR1Y2VyKHN0YXRlOiBBdXRoU3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbjogVXNlckFjdGlvbnMuQWN0aW9ucykge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TSUdOX1VQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBudWxsLCBpc1NpZ25VcExvYWRpbmc6IHRydWUgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5TSUdOX1VQX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6IGFjdGlvbi5wYXlsb2FkLCBpc1NpZ25VcExvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0lHTl9VUF9TVUNDRVNTOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBudWxsLCBpc1NpZ25VcExvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX0lOOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBudWxsLCBpc0xvZ2luTG9hZGluZzogdHJ1ZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLkxPR19JTl9TVUNDRVNTOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlcjogYWN0aW9uLnBheWxvYWQudXNlcixcbiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgICAgICB1c2Vyc0xpc3Q6IGFjdGlvbi5wYXlsb2FkLnVzZXJzTGlzdCxcbiAgICAgICAgICAgICAgICBpc0xvZ2luTG9hZGluZzogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuTE9HX0lOX0ZBSUxVUkU6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6IGFjdGlvbi5wYXlsb2FkLCBpc0xvZ2luTG9hZGluZzogZmFsc2UgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0dfT1VUOlxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5MT0FEX1VTRVJfSU5GT1JNQVRJT05fU1VDQ0VTUzpcbiAgICAgICAgICAgIGNvbnN0IGRldGFpbGVkVXNlciA9IHsgLi4uc3RhdGUudXNlciwgLi4uYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiBkZXRhaWxlZFVzZXIgfTtcbiAgICAgICAgY2FzZSBVc2VyQWN0aW9ucy5BVVRIX0FDVElPTlNfVFlQRS5DSEFOR0VfUEFTU1dPUkQ6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0VORF9QQVNTV09SRDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiB0cnVlIH07XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEX1NVQ0NFU1M6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuQ0hBTkdFX1BBU1NXT1JEX0ZBSUxVUkU6XG4gICAgICAgIGNhc2UgVXNlckFjdGlvbnMuQVVUSF9BQ1RJT05TX1RZUEUuU0VORF9QQVNTV09SRF9TVUNDRVNTOlxuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlNFTkRfUEFTU1dPUkRfRkFJTFVSRTpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Bhc3N3b3JkQmVpbmdDaGFuZ2VkOiBmYWxzZSB9O1xuICAgICAgICBjYXNlIFVzZXJBY3Rpb25zLkFVVEhfQUNUSU9OU19UWVBFLlVQREFURV9VU0VSOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZXI6IHsgLi4uc3RhdGUudXNlciwgLi4uYWN0aW9uLnBheWxvYWQgfX07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuIl19