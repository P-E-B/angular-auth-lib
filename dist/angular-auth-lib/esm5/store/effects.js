import { __decorate, __param, __read } from "tslib";
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { Router } from '@angular/router';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { Store, select } from '@ngrx/store';
import { MatDialogRef, MatDialog } from '@angular/material/dialog';
import { map, switchMap, catchError, tap, withLatestFrom, concatMap, filter } from 'rxjs/operators';
import { get } from '../utils';
import { AUTH_ACTIONS_TYPE, LogInSuccess, LogInFailure, SignUpFailure, SignUpSuccess, ChangePasswordSuccess, ChangePasswordFailure, LoadUserInformationSuccess, LoadUserInformationFailure, SendPasswordSuccess, SendPasswordFailure } from './actions';
import { selectUser } from './selectors';
import { AuthService } from '../services/auth.service';
import { ForgottenPasswordComponent } from '../components/forgotten-password/forgotten-password.component';
import { AUTH_RESET_ACTIONS, AUTH_TRADUCTIONS } from '../token';
import { SignUpComponent } from '../components/sign-up/sign-up.component';
import { isPlatformBrowser } from '@angular/common';
var AuthEffects = /** @class */ (function () {
    function AuthEffects(resetActions, traductions, platformId, actions, authService, router, toastService, dialog, store) {
        var _this = this;
        this.resetActions = resetActions;
        this.traductions = traductions;
        this.platformId = platformId;
        this.actions = actions;
        this.authService = authService;
        this.router = router;
        this.toastService = toastService;
        this.dialog = dialog;
        this.store = store;
        this.OpenSignUpDialog$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.OPEN_SIGN_UP_DIALOG), tap(function () { return _this.dialogRef = _this.dialog.open(SignUpComponent); }));
        this.SignUp$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP), map(function (action) { return action.payload; }), switchMap(function (user) { return _this.authService.createUser(user).pipe(map(function () { return new SignUpSuccess(); }), catchError(function (error) { return of(new SignUpFailure(error)); })); }));
        this.SignUpSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS), tap(function () {
            _this.toastService.success(get(_this.traductions || {}, 'messages.signupSuccess', 'Your account has been created!'));
        }));
        this.SignUpFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE), tap(function (error) { return _this.toastService.error(get(_this.traductions || {}, 'messages.signupFailure', 'Please try again with a new username.')); }));
        this.LogIn$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN), filter(function (action) { return isPlatformBrowser(_this.platformId); }), map(function (action) { return action.payload; }), switchMap(function (user) { return _this.authService.login(user).pipe(concatMap(function (loggedInUser) {
            sessionStorage.setItem('token', loggedInUser.token.token);
            return _this.authService.getUserInformation().pipe(map(function (_a) {
                var user = _a.user, usersList = _a.usersList;
                return new LogInSuccess({ user: user, usersList: usersList });
            }), catchError(function (error) { return of(new LogInFailure(error)); }));
        }), catchError(function (error) { return of(new LogInFailure(error)); })); }));
        this.LogInSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS), filter(function (action) { return isPlatformBrowser(_this.platformId); }), withLatestFrom(this.store.pipe(select(selectUser))), tap(function (_a) {
            var _b = __read(_a, 2), action = _b[0], user = _b[1];
            var redirectedUrlAfterLogIn = sessionStorage.getItem('redirectedUrlAfterLogIn');
            if (redirectedUrlAfterLogIn && isPlatformBrowser(_this.platformId)) {
                _this.router.navigateByUrl(redirectedUrlAfterLogIn);
                sessionStorage.removeItem('redirectedUrlAfterLogIn');
            }
            else {
                _this.router.navigateByUrl(user.redirectUrlAfterLogin);
            }
            _this.toastService.success(get(_this.traductions || {}, 'messages.loginSuccess', 'Hi! Nice to see you again!'));
        }));
        this.LogInFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_IN_FAILURE), tap(function (error) { return _this.toastService.error(get(_this.traductions || {}, 'messages.loginFailure', 'Wrong credentials. Please check again.')); }));
        this.LogOut$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOG_OUT), filter(function (action) { return isPlatformBrowser(_this.platformId); }), switchMap(function (action) {
            sessionStorage.removeItem('token');
            _this.router.navigate(['log-in']);
            return (_this.resetActions || []).map(function (resetAction) { return new resetAction(); });
        }));
        this.LoadUserInformation$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION), switchMap(function (action) { return _this.authService.getUserInformation().pipe(map(function (_a) {
            var user = _a.user, usersList = _a.usersList;
            return new LoadUserInformationSuccess(user);
        }), catchError(function (error) { return of(new LoadUserInformationFailure(error)); })); }));
        this.ChangePassword$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD), switchMap(function (action) { return _this.authService.changePassword(action.payload).pipe(map(function () { return new ChangePasswordSuccess(); }), catchError(function (error) { return of(new ChangePasswordFailure(error)); })); }));
        this.ChangePasswordSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS), tap(function () { return _this.toastService.success(get(_this.traductions || {}, 'messages.changePasswordSuccess', 'Your password has been successfully changed!')); }));
        this.ChangePasswordFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE), tap(function (error) { return _this.toastService.error(get(_this.traductions || {}, 'messages.changePasswordFailure', 'Wrong current password. Please try again.')); }));
        this.OpenForgottenPasswordDialog$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.OPEN_FORGOTTEN_PASSWORD_DIALOG), tap(function () { return _this.dialogRef = _this.dialog.open(ForgottenPasswordComponent); }));
        this.SendPassword$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD), tap(function () {
            _this.dialogRef.close();
        }), switchMap(function (action) { return _this.authService.sendPassword(action.payload).pipe(map(function () { return new SendPasswordSuccess(); }), catchError(function (error) { return of(new SendPasswordFailure(error)); })); }));
        this.SendPasswordSuccess$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS), tap(function () { return _this.toastService.success(get(_this.traductions || {}, 'messages.passwordResetSuccess', 'An email for resetting your password has been sent to your address.')); }));
        this.SendPasswordFailure$ = this.actions.pipe(ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE), tap(function () { return _this.toastService.error(get(_this.traductions || {}, 'messages.passwordResetFailure', 'An error occured. Please try again.')); }));
    }
    AuthEffects.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [AUTH_RESET_ACTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [AUTH_TRADUCTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Actions },
        { type: AuthService },
        { type: Router },
        { type: ToastrService },
        { type: MatDialog },
        { type: Store }
    ]; };
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "OpenSignUpDialog$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "SignUp$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "SignUpSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "SignUpFailure$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "LogIn$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "LogInSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "LogInFailure$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "LogOut$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "LoadUserInformation$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "ChangePassword$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "ChangePasswordSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "ChangePasswordFailure$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "OpenForgottenPasswordDialog$", void 0);
    __decorate([
        Effect()
    ], AuthEffects.prototype, "SendPassword$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "SendPasswordSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], AuthEffects.prototype, "SendPasswordFailure$", void 0);
    AuthEffects = __decorate([
        Injectable(),
        __param(0, Inject(AUTH_RESET_ACTIONS)),
        __param(1, Inject(AUTH_TRADUCTIONS)),
        __param(2, Inject(PLATFORM_ID))
    ], AuthEffects);
    return AuthEffects;
}());
export { AuthEffects };
//# sourceMappingURL=data:application/json;base64,