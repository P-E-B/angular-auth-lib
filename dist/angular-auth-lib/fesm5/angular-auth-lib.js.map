{"version":3,"file":"angular-auth-lib.js","sources":["ng://angular-auth-lib/token.ts","ng://angular-auth-lib/services/auth.service.ts","ng://angular-auth-lib/store/selectors.ts","ng://angular-auth-lib/services/auth-guard.service.ts","ng://angular-auth-lib/services/token.interceptor.ts","ng://angular-auth-lib/utils.ts","ng://angular-auth-lib/store/actions.ts","ng://angular-auth-lib/components/log-in/log-in.component.ts","ng://angular-auth-lib/components/forgotten-password/forgotten-password.component.ts","ng://angular-auth-lib/components/sign-up/sign-up.component.ts","ng://angular-auth-lib/store/reducer.ts","ng://angular-auth-lib/store/effects.ts","ng://angular-auth-lib/angular-auth-lib.module.ts","ng://angular-auth-lib/public-api.ts","ng://angular-auth-lib/angular-auth-lib.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface AuthModuleConfig {\n    urls: {\n      accessTokenUrl: string;\n      userInformationUrl: string;\n      sendBackPasswordUrl: string;\n      refreshTokenUrl?: string;\n      changePasswordUrl?: string;\n      signUpUrl?: string;\n    };\n    images: {\n      loginBackgroundImageUrl: string;\n      logoImageUrl: string;\n    };\n    traductions?: {\n      dialogs?: {\n        signup?: string;\n      }\n      buttons?: {\n        login?: string;\n        send?: string;\n        passwordForgotten?: string;\n        signup?: string;\n      }\n      form?: {\n        usernamePlaceholder?: string;\n        passwordPlaceholder?: string;\n        emailPlaceholder?: string;\n        firstNamePlaceholder?: string;\n        lastNamePlaceholder?: string;\n        enterprisePlaceholder?: string;\n      },\n      messages?: {\n        loginSuccess?: string;\n        loginFailure?: string;\n        signupSuccess?: string;\n        signupFailure?: string;\n        passwordResetSuccess?: string;\n        passwordResetFailure?: string;\n        changePasswordSuccess?: string;\n        changePasswordFailure?: string;\n      }\n    };\n    styles?: {\n        buttonsColor?: string;\n        buttonsBackgroundColor?: string;\n    };\n    resetActions?: any[];\n}\n\nexport const AUTH_API_URLS = new InjectionToken<AuthModuleConfig['urls']>('Auth api related urls');\nexport const AUTH_IMAGES_URLS = new InjectionToken<AuthModuleConfig['images']>('Images urls');\nexport const AUTH_TRADUCTIONS = new InjectionToken<AuthModuleConfig['traductions']>('Traductions');\nexport const AUTH_RESET_ACTIONS = new InjectionToken<AuthModuleConfig['resetActions']>('Reset actions');\nexport const AUTH_STYLES = new InjectionToken<AuthModuleConfig['styles']>('Styling');\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User, Token } from '../models/user.models';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AUTH_API_URLS, AuthModuleConfig } from '../token';\nimport { isPlatformBrowser } from '@angular/common';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    @Inject(AUTH_API_URLS) private apiUrls: AuthModuleConfig['urls'],\n    @Inject(PLATFORM_ID) private platformId: any,\n    private http: HttpClient\n  ) { }\n\n  public decodeToken(token: string): Token {\n    const tokenParts = token.split(/\\./);\n    const tokenDecoded = JSON.parse(window.atob(tokenParts[1]));\n    const expiringDate = new Date(tokenDecoded.exp * 1000);\n    return { token: token, expiringDate: expiringDate };\n  }\n\n  public getToken(): Token {\n    const token = isPlatformBrowser(this.platformId) ? sessionStorage.getItem('token') : null;\n    return token ? this.decodeToken(token) : null;\n  }\n\n  private getAccessToken(user: User): Observable<Token> {\n    const body = { username: user.username, password: user.password };\n    return this.http.post(this.apiUrls.accessTokenUrl, body).pipe(\n      map((tokenData: any) => this.decodeToken(tokenData['access']))\n    );\n  }\n\n  private getRefreshToken(token: Token): Observable<Token> {\n    const body = { refresh: token.token };\n    return this.http.post(this.apiUrls.refreshTokenUrl, body).pipe(\n      map((tokenData: any) => this.decodeToken(tokenData['access']))\n    );\n  }\n\n  public login(user: User): Observable<User> {\n    return this.getAccessToken(user).pipe(\n      map((token: Token) => ({\n        ...user,\n        token: token\n      }))\n    );\n  }\n\n  getUserInformation(): Observable<{ user: User, usersList: User[] }> {\n    return this.http.get(this.apiUrls.userInformationUrl).pipe(\n      map((result: any) => ({\n        usersList: result.usersList,\n        user: { ...result.user, dateJoined: new Date(result.user.dateJoined) }\n      }))\n    );\n  }\n\n  changePassword(passwordChanges: { currentPassword: string, nextPassword: string }) {\n    return this.http.put(this.apiUrls.changePasswordUrl, passwordChanges);\n  }\n\n  sendPassword(mail: string) {\n    return this.http.post(this.apiUrls.sendBackPasswordUrl, { email: mail });\n  }\n\n  createUser(user: User) {\n    return this.http.post(this.apiUrls.signUpUrl, user);\n  }\n}\n","import { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { AuthState } from './reducer';\n\nexport const selectAuthState = createFeatureSelector<AuthState>('auth');\n\nexport const selectIsAuthenticated = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.isAuthenticated\n);\n\nexport const selectLogInError = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.error\n);\n\nexport const selectUser = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.user\n);\n\nexport const selectIsPasswordBeingChanged = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.isPasswordBeingChanged\n);\n\nexport const selectUsersList = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.usersList\n); // list of colleagues of the current user for example\n\nexport const selectIsSignUpLoading = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.isSignUpLoading\n);\n\nexport const selectIsLoginLoading = createSelector(\n    selectAuthState,\n    (state: AuthState) => state.isLoginLoading\n);\n","import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, Router } from '@angular/router';\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { Store, select } from '@ngrx/store';\n\nimport { selectUser, selectIsAuthenticated } from '../store/selectors';\nimport { AuthState } from '../store/reducer';\nimport { User } from '../models/user.models';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private store: Store<AuthState>,\n    private router: Router,\n    @Inject(PLATFORM_ID) private platformId: any,\n  ) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.store.pipe(\n      select(selectUser),\n      withLatestFrom(this.store.pipe(select(selectIsAuthenticated))),\n      map(([user, isAuthenticated]: [User, boolean]) => {\n        if (user && user.allowedUrls.includes(route.routeConfig.path) && isAuthenticated) {\n          return true;\n        } else {\n          if (user && user.allowedUrls.includes(route.routeConfig.path) && isPlatformBrowser(this.platformId)) {\n            sessionStorage.setItem('redirectedUrlAfterLogIn', state.url);\n          }\n          this.router.navigate(['log-in']);\n          return false;\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          'Authorization': `Bearer ${token.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n","export function get(object: Object, path: string, defaultValue: any = null): any {\n    const nestedKeys = path.split('.');\n    let currentPathValue = object;\n    for (let key of nestedKeys) {\n        currentPathValue = currentPathValue[key] || null;\n        if (typeof currentPathValue !== 'object' && currentPathValue !== null) {\n            return currentPathValue;\n        } else if (currentPathValue === null) {\n            return defaultValue || null;\n        }\n    }\n    return defaultValue || null;\n}\n","import { Action } from '@ngrx/store';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { User } from '../models/user.models';\n\nexport enum AUTH_ACTIONS_TYPE {\n    OPEN_SIGN_UP_DIALOG = '[Auth] User wants to sign up',\n    SIGN_UP = '[Auth] User tries to sign up',\n    SIGN_UP_SUCCESS = '[Auth] Sign up success',\n    SIGN_UP_FAILURE = '[Auth] Sign up failure',\n\n    LOG_IN = '[Auth] User tries to log in',\n    LOG_IN_SUCCESS = '[Auth] Log in success',\n    LOG_IN_FAILURE = '[Auth] Log in failure',\n\n    LOG_OUT = '[Auth] User logs out',\n\n    LOAD_USER_INFORMATION = '[Auth] Loading of user information',\n    LOAD_USER_INFORMATION_SUCCESS = '[Auth] Loading of user information success',\n    LOAD_USER_INFORMATION_FAILURE = '[Auth] Loading of user information failure',\n\n    CHANGE_PASSWORD = '[Auth] User changes his password',\n    CHANGE_PASSWORD_SUCCESS = '[Auth] Password change success',\n    CHANGE_PASSWORD_FAILURE = '[Auth] Password change failure',\n\n    OPEN_FORGOTTEN_PASSWORD_DIALOG = '[Auth] User opens dialog for password resetting',\n    SEND_PASSWORD = '[Auth] User has asked for having back a new password',\n    SEND_PASSWORD_SUCCESS = '[Auth] User has received his password',\n    SEND_PASSWORD_FAILURE = '[Auth] Error in the process of sending the password to the user',\n\n    UPDATE_USER = '[Auth] Update of user'\n}\n\nexport class OpenSignUpDialog implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.OPEN_SIGN_UP_DIALOG;\n}\n\nexport class SignUp implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SIGN_UP;\n    constructor(public payload: Partial<User>) {}\n}\n\nexport class SignUpSuccess implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS;\n}\n\nexport class SignUpFailure implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE;\n    constructor(public payload: HttpErrorResponse) {}\n}\n\nexport class LogIn implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOG_IN;\n    constructor (public payload: Partial<User>) {}\n}\n\nexport class LogInSuccess implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS;\n    constructor(public payload: {\n        user: User,\n        usersList: { id: number, firstName: string, lastName: string }[]\n    }) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOG_IN_FAILURE;\n    constructor(public payload: HttpErrorResponse) {}\n}\n\nexport class LogOut implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOG_OUT;\n}\n\nexport class LoadUserInformation implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION;\n}\n\nexport class LoadUserInformationSuccess implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS;\n    constructor(public payload: User) {}\n}\n\nexport class LoadUserInformationFailure implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_FAILURE;\n    constructor(public payload: HttpErrorResponse) {}\n}\n\nexport class ChangePassword implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD;\n    constructor(public payload: { currentPassword: string, nextPassword: string }) {}\n}\n\nexport class ChangePasswordSuccess implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS;\n}\n\nexport class ChangePasswordFailure implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE;\n    constructor(public payload: HttpErrorResponse) {}\n}\n\nexport class OpenForgottenPasswordDialog implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.OPEN_FORGOTTEN_PASSWORD_DIALOG;\n}\n\nexport class SendPassword implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SEND_PASSWORD;\n    constructor(public payload: string) {}\n}\n\nexport class SendPasswordSuccess implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS;\n}\n\nexport class SendPasswordFailure implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE;\n    constructor(public payload: HttpErrorResponse) {}\n}\n\nexport class UpdateUser implements Action {\n    readonly type = AUTH_ACTIONS_TYPE.UPDATE_USER;\n    constructor(public payload: Partial<User>) {}\n}\n\nexport type Actions = OpenSignUpDialog\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogIn\n    | LogInSuccess\n    | LogInFailure\n    | LogOut\n    | LoadUserInformation\n    | LoadUserInformationSuccess\n    | LoadUserInformationFailure\n    | ChangePassword\n    | ChangePasswordSuccess\n    | ChangePasswordFailure\n    | OpenForgottenPasswordDialog\n    | SendPassword\n    | SendPasswordSuccess\n    | SendPasswordFailure\n    | UpdateUser;\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Store, select } from '@ngrx/store';\n\nimport { get } from '../../utils';\n\nimport { User } from '../../models/user.models';\nimport { AuthState } from '../../store/reducer';\nimport { OpenForgottenPasswordDialog, LogIn } from '../../store/actions';\nimport { selectIsPasswordBeingChanged, selectIsLoginLoading } from '../../store/selectors';\nimport { AUTH_IMAGES_URLS, AuthModuleConfig, AUTH_TRADUCTIONS, AUTH_STYLES } from '../../token';\n\n@Component({\n  selector: 'auth-lib-log-in',\n  templateUrl: './log-in.component.html',\n  styleUrls: ['./log-in.component.scss']\n})\nexport class LogInComponent implements OnInit {\n  isPasswordBeingChanged$ = this.store.pipe(select(selectIsPasswordBeingChanged));\n  isLoginLoading$ = this.store.pipe(select(selectIsLoginLoading));\n  userForm: FormGroup;\n\n  usernamePlaceholder = 'Username';\n  passwordPlaceholder = 'Password';\n  forgottenPassword = 'Forgot your password?';\n\n  loginButtonTraduction = 'Log in';\n  buttonsBackgroundColor = '#3f51b5';\n  buttonsColor = 'white';\n\n  constructor(\n    @Inject(AUTH_IMAGES_URLS) public images: AuthModuleConfig['images'],\n    @Inject(AUTH_TRADUCTIONS) private traductions: AuthModuleConfig['traductions'],\n    @Inject(AUTH_STYLES) private styles: AuthModuleConfig['styles'],\n    private formBuilder: FormBuilder,\n    private store: Store<AuthState>\n  ) {\n  }\n\n  ngOnInit() {\n    this.usernamePlaceholder = get(this.traductions || {}, 'form.usernamePlaceholder', this.usernamePlaceholder);\n    this.passwordPlaceholder = get(this.traductions || {}, 'form.passwordPlaceholder', this.passwordPlaceholder);\n    this.forgottenPassword = get(this.traductions || {}, 'buttons.passwordForgotten', this.forgottenPassword);\n\n    this.loginButtonTraduction = get(this.traductions || {}, 'buttons.login', this.loginButtonTraduction);\n    this.buttonsBackgroundColor = get(this.styles || {}, 'buttonsBackgroundColor', this.buttonsBackgroundColor);\n    this.buttonsColor = get(this.styles || {}, 'buttonsColor', this.buttonsColor);\n\n    this.userForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  openDialog() {\n    this.store.dispatch(new OpenForgottenPasswordDialog());\n  }\n\n  onSubmit() {\n    const newUser: Partial<User> = {\n      username: this.userForm.value['username'],\n      password: this.userForm.value['password']\n    };\n    this.store.dispatch(new LogIn(newUser));\n  }\n}\n","import { Component, ViewChild, ElementRef, Inject, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { get } from '../../utils';\n\nimport { AuthState } from '../../store/reducer';\nimport { SendPassword } from '../../store/actions';\nimport { AUTH_TRADUCTIONS, AUTH_STYLES, AuthModuleConfig } from '../../token';\n\n@Component({\n  selector: 'auth-lib-forgotten-password',\n  templateUrl: './forgotten-password.component.html',\n  styleUrls: ['./forgotten-password.component.scss']\n})\nexport class ForgottenPasswordComponent implements OnInit {\n  @ViewChild('email') emailInput: ElementRef;\n\n  emailPlaceholder = 'Your email';\n  sendButtonTraduction = 'Send';\n\n  buttonsBackgroundColor = '#3f51b5';\n  buttonsColor = 'white';\n\n  constructor(\n    private store: Store<AuthState>,\n    @Inject(AUTH_TRADUCTIONS) private traductions: AuthModuleConfig['traductions'],\n    @Inject(AUTH_STYLES) private styles: AuthModuleConfig['styles'],\n  ) { }\n\n  ngOnInit() {\n    this.emailPlaceholder = get(this.traductions || {}, 'form.emailPlaceholder', this.emailPlaceholder);\n    this.sendButtonTraduction = get(this.traductions || {}, 'buttons.send', this.sendButtonTraduction);\n\n    this.buttonsBackgroundColor = get(this.styles || {}, 'buttonsBackgroundColor', this.buttonsBackgroundColor);\n    this.buttonsColor = get(this.styles || {}, 'buttonsColor', this.buttonsColor);\n  }\n\n  send() {\n    this.store.dispatch(new SendPassword(this.emailInput.nativeElement.value));\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\n\nimport { get } from '../../utils';\n\nimport { AuthState } from '../../store/reducer';\nimport { User } from '../../models/user.models';\nimport { SignUp } from '../../store/actions';\nimport { AUTH_TRADUCTIONS, AuthModuleConfig, AUTH_STYLES } from '../../token';\n\n@Component({\n  selector: 'auth-lib-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n  userForm: FormGroup;\n\n  usernamePlaceholder = 'Username';\n  passwordPlaceholder = 'Password';\n  firstNamePlaceholder = 'First name';\n  lastNamePlaceholder = 'Last name';\n  emailPlaceholder = 'Email';\n  enterprisePlaceholder = 'Enterprise';\n\n  signUpDialogTitle = 'Sign Up';\n\n  signupButtonTraduction = 'Log in';\n  buttonsBackgroundColor = '#3f51b5';\n  buttonsColor = 'white';\n\n  constructor(\n    @Inject(AUTH_TRADUCTIONS) private traductions: AuthModuleConfig['traductions'],\n    @Inject(AUTH_STYLES) private styles: AuthModuleConfig['styles'],\n    public dialogRef: MatDialogRef<SignUpComponent>,\n    private formBuilder: FormBuilder,\n    private store: Store<AuthState>\n  ) { }\n\n  ngOnInit() {\n    this.usernamePlaceholder = get(this.traductions || {}, 'form.usernamePlaceholder', this.usernamePlaceholder);\n    this.passwordPlaceholder = get(this.traductions || {}, 'form.passwordPlaceholder', this.passwordPlaceholder);\n    this.firstNamePlaceholder = get(this.traductions || {}, 'form.firstNamePlaceholder', this.firstNamePlaceholder);\n    this.lastNamePlaceholder = get(this.traductions || {}, 'form.lastNamePlaceholder', this.lastNamePlaceholder);\n    this.emailPlaceholder = get(this.traductions || {}, 'form.emailPlaceholder', this.emailPlaceholder);\n    this.enterprisePlaceholder = get(this.traductions || {}, 'form.enterprisePlaceholder', this.enterprisePlaceholder);\n\n    this.signUpDialogTitle = get(this.traductions || {}, 'dialogs.signup', this.signUpDialogTitle);\n\n    this.signupButtonTraduction = get(this.traductions || {}, 'buttons.signup', this.signupButtonTraduction);\n    this.buttonsBackgroundColor = get(this.styles || {}, 'buttonsBackgroundColor', this.buttonsBackgroundColor);\n    this.buttonsColor = get(this.styles || {}, 'buttonsColor', this.buttonsColor);\n\n    this.userForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      enterprise: ''\n    });\n  }\n\n  onSubmit() {\n    const newUser: Partial<User> = {\n      username: this.userForm.value['username'],\n      password: this.userForm.value['password'],\n      firstName: this.userForm.value['firstName'],\n      lastName: this.userForm.value['lastName'],\n      email: this.userForm.value['email'],\n      enterprise: this.userForm.value['enterprise'] || null\n    };\n    this.store.dispatch(new SignUp(newUser));\n    this.dialogRef.close()\n  }\n}\n","import * as UserActions from './actions';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { User } from '../models/user.models';\n\nexport interface AuthState {\n    isAuthenticated: boolean;\n    isSignUpLoading: boolean;\n    isLoginLoading: boolean;\n    user: User;\n    error: HttpErrorResponse;\n    isPasswordBeingChanged: boolean;\n    usersList: { id: number, firstName: string, lastName: string }[];\n}\n\nexport const initialState: AuthState = {\n    isAuthenticated: false,\n    isSignUpLoading: false,\n    isLoginLoading: false,\n    user: null,\n    error: null,\n    isPasswordBeingChanged: false,\n    usersList: null\n};\n\nexport function authReducer(state: AuthState = initialState, action: UserActions.Actions) {\n    switch (action.type) {\n        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP:\n            return { ...state, error: null, isSignUpLoading: true };\n        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE:\n            return { ...state, error: action.payload, isSignUpLoading: false };\n        case UserActions.AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS:\n            return { ...state, error: null, isSignUpLoading: false };\n        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN:\n            return { ...state, error: null, isLoginLoading: true };\n        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: true,\n                user: action.payload.user,\n                error: null,\n                usersList: action.payload.usersList,\n                isLoginLoading: false\n            };\n        case UserActions.AUTH_ACTIONS_TYPE.LOG_IN_FAILURE:\n            return { ...state, error: action.payload, isLoginLoading: false };\n        case UserActions.AUTH_ACTIONS_TYPE.LOG_OUT:\n            return initialState;\n        case UserActions.AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION_SUCCESS:\n            const detailedUser = { ...state.user, ...action.payload };\n            return { ...state, user: detailedUser };\n        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD:\n        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD:\n            return { ...state, isPasswordBeingChanged: true };\n        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS:\n        case UserActions.AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE:\n        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS:\n        case UserActions.AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE:\n            return { ...state, isPasswordBeingChanged: false };\n        case UserActions.AUTH_ACTIONS_TYPE.UPDATE_USER:\n            return { ...state, user: { ...state.user, ...action.payload }};\n        default:\n            return state;\n    }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\nimport { Store, select } from '@ngrx/store';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { map, switchMap, catchError, tap, withLatestFrom, concatMap, filter } from 'rxjs/operators';\n\nimport { get } from '../utils';\n\nimport {\n  AUTH_ACTIONS_TYPE,\n  LogIn,\n  LogInSuccess,\n  LogInFailure,\n  LogOut,\n  SignUp,\n  SignUpFailure,\n  SignUpSuccess,\n  ChangePassword,\n  ChangePasswordSuccess,\n  ChangePasswordFailure,\n  LoadUserInformationSuccess,\n  LoadUserInformationFailure,\n  LoadUserInformation,\n  SendPassword,\n  SendPasswordSuccess,\n  SendPasswordFailure\n} from './actions';\nimport { selectUser } from './selectors';\nimport { User } from '../models/user.models';\nimport { AuthService } from '../services/auth.service';\nimport { ForgottenPasswordComponent } from '../components/forgotten-password/forgotten-password.component';\nimport { AUTH_RESET_ACTIONS, AUTH_TRADUCTIONS, AuthModuleConfig } from '../token';\nimport { AuthState } from './reducer';\nimport { SignUpComponent } from '../components/sign-up/sign-up.component';\nimport { isPlatformBrowser } from '@angular/common';\n\n\n@Injectable()\nexport class AuthEffects {\n  private dialogRef: MatDialogRef<SignUpComponent | ForgottenPasswordComponent>;\n\n  constructor(\n    @Inject(AUTH_RESET_ACTIONS) private resetActions: any[],\n    @Inject(AUTH_TRADUCTIONS) private traductions: AuthModuleConfig['traductions'],\n    @Inject(PLATFORM_ID) private platformId: any,\n    private actions: Actions,\n    private authService: AuthService,\n    private router: Router,\n    private toastService: ToastrService,\n    private dialog: MatDialog,\n    private store: Store<AuthState>\n  ) { }\n\n  @Effect({ dispatch: false })\n  OpenSignUpDialog$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.OPEN_SIGN_UP_DIALOG),\n    tap(() => this.dialogRef = this.dialog.open(SignUpComponent))\n  );\n\n  @Effect()\n  SignUp$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SIGN_UP),\n    map((action: SignUp) => action.payload),\n    switchMap((user: User) => this.authService.createUser(user).pipe(\n      map(() => new SignUpSuccess()),\n      catchError((error: HttpErrorResponse) => of(new SignUpFailure(error)))\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  SignUpSuccess$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SIGN_UP_SUCCESS),\n    tap(() => {\n      this.toastService.success(\n        get(this.traductions || {}, 'messages.signupSuccess', 'Your account has been created!')\n      )\n    })\n  );\n\n  @Effect({ dispatch: false })\n  SignUpFailure$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SIGN_UP_FAILURE),\n    tap((error: HttpErrorResponse) => this.toastService.error(\n      get(this.traductions || {}, 'messages.signupFailure', 'Please try again with a new username.')\n    ))\n  );\n\n  @Effect()\n  LogIn$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.LOG_IN),\n    filter((action: LogIn) => isPlatformBrowser(this.platformId)),\n    map((action: LogIn) => action.payload),\n    switchMap((user: User) => this.authService.login(user).pipe(\n      concatMap((loggedInUser: User) => {\n        sessionStorage.setItem('token', loggedInUser.token.token);\n        return this.authService.getUserInformation().pipe(\n          map(({user, usersList}) => new LogInSuccess({ user, usersList })),\n          catchError((error: HttpErrorResponse) => of(new LogInFailure(error)))\n        );\n      }),\n      catchError((error: HttpErrorResponse) => of(new LogInFailure(error)))\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  LogInSuccess$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.LOG_IN_SUCCESS),\n    filter((action: LogInSuccess) => isPlatformBrowser(this.platformId)),\n    withLatestFrom(this.store.pipe(select(selectUser))),\n    tap(([action, user]: [LogInSuccess, User]) => {\n      const redirectedUrlAfterLogIn = sessionStorage.getItem('redirectedUrlAfterLogIn');\n      if (redirectedUrlAfterLogIn && isPlatformBrowser(this.platformId)) {\n        this.router.navigateByUrl(redirectedUrlAfterLogIn)\n        sessionStorage.removeItem('redirectedUrlAfterLogIn');\n      } else {\n        this.router.navigateByUrl(user.redirectUrlAfterLogin);\n      }\n      this.toastService.success(\n        get(this.traductions || {}, 'messages.loginSuccess', 'Hi! Nice to see you again!')\n      );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  LogInFailure$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.LOG_IN_FAILURE),\n    tap((error: HttpErrorResponse) => this.toastService.error(\n      get(this.traductions || {}, 'messages.loginFailure', 'Wrong credentials. Please check again.')\n    ))\n  );\n\n  @Effect()\n  LogOut$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.LOG_OUT),\n    filter((action: LogOut) => isPlatformBrowser(this.platformId)),\n    switchMap((action: LogOut) => {\n      sessionStorage.removeItem('token');\n      this.router.navigate(['log-in']);\n      return (this.resetActions || []).map((resetAction: any) => new resetAction())\n    })\n  );\n\n  @Effect()\n  LoadUserInformation$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.LOAD_USER_INFORMATION),\n    switchMap((action: LoadUserInformation) => this.authService.getUserInformation().pipe(\n      map(({user, usersList}) => new LoadUserInformationSuccess(user)),\n      catchError((error: HttpErrorResponse) => of(new LoadUserInformationFailure(error)))\n    ))\n  );\n\n  @Effect()\n  ChangePassword$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD),\n    switchMap((action: ChangePassword) => this.authService.changePassword(action.payload).pipe(\n      map(() => new ChangePasswordSuccess()),\n      catchError((error: HttpErrorResponse) => of(new ChangePasswordFailure(error)))\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  ChangePasswordSuccess$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_SUCCESS),\n    tap(() => this.toastService.success(\n      get(this.traductions || {}, 'messages.changePasswordSuccess', 'Your password has been successfully changed!')\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  ChangePasswordFailure$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.CHANGE_PASSWORD_FAILURE),\n    tap((error: HttpErrorResponse) => this.toastService.error(\n      get(this.traductions || {}, 'messages.changePasswordFailure', 'Wrong current password. Please try again.')\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  OpenForgottenPasswordDialog$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.OPEN_FORGOTTEN_PASSWORD_DIALOG),\n    tap(() => this.dialogRef = this.dialog.open(ForgottenPasswordComponent))\n  );\n\n  @Effect()\n  SendPassword$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD),\n    tap(() => {\n      this.dialogRef.close();\n    }),\n    switchMap((action: SendPassword) => this.authService.sendPassword(action.payload).pipe(\n      map(() => new SendPasswordSuccess()),\n      catchError((error: HttpErrorResponse) => of(new SendPasswordFailure(error)))\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  SendPasswordSuccess$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_SUCCESS),\n    tap(() => this.toastService.success(\n      get(this.traductions || {}, 'messages.passwordResetSuccess', 'An email for resetting your password has been sent to your address.')\n    ))\n  );\n\n  @Effect({ dispatch: false })\n  SendPasswordFailure$ = this.actions.pipe(\n    ofType(AUTH_ACTIONS_TYPE.SEND_PASSWORD_FAILURE),\n    tap(() => this.toastService.error(\n      get(this.traductions || {}, 'messages.passwordResetFailure', 'An error occured. Please try again.')\n    ))\n  );\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { authReducer } from './store/reducer';\nimport { AuthEffects } from './store/effects';\nimport { TokenInterceptor } from './services/token.interceptor';\nimport { AuthGuard } from './services/auth-guard.service';\nimport { LogInComponent } from './components/log-in/log-in.component';\nimport { ForgottenPasswordComponent } from './components/forgotten-password/forgotten-password.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\n\nimport {\n  AuthModuleConfig,\n  AUTH_API_URLS,\n  AUTH_IMAGES_URLS,\n  AUTH_TRADUCTIONS,\n  AUTH_RESET_ACTIONS,\n  AUTH_STYLES\n} from './token';\n\n\n@NgModule({\n  declarations: [LogInComponent, ForgottenPasswordComponent, SignUpComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature('auth', authReducer),\n    EffectsModule.forFeature([AuthEffects]),\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    ToastrModule.forRoot({\n      timeOut: 3000,\n      positionClass: 'toast-bottom-right',\n      preventDuplicates: true\n    })\n  ],\n  entryComponents: [ForgottenPasswordComponent],\n  exports: [LogInComponent, ForgottenPasswordComponent],\n  providers: [AuthGuard]\n})\nexport class AuthModule {\n  static forRoot(config: AuthModuleConfig): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        { provide: AUTH_API_URLS, useValue: config.urls },\n        { provide: AUTH_IMAGES_URLS, useValue: config.images },\n        { provide: AUTH_TRADUCTIONS, useValue: config.traductions },\n        { provide: AUTH_RESET_ACTIONS, useValue: config.resetActions },\n        { provide: AUTH_STYLES, useValue: config.styles },\n        { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-auth-lib\n */\n\nexport * from './services/auth.service';\nexport * from './services/auth-guard.service';\nexport * from './services/token.interceptor';\nexport * from './components/log-in/log-in.component';\nexport * from './components/forgotten-password/forgotten-password.component';\nexport * from './components/sign-up/sign-up.component';\nexport * from './store/actions';\nexport * from './store/reducer';\nexport * from './store/selectors';\nexport * from './models/user.models';\nexport * from './token';\nexport * from './angular-auth-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AuthEffects as ɵa} from './store/effects';"],"names":["UserActions.AUTH_ACTIONS_TYPE"],"mappings":"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"}